	$FreeBSD$

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; FreeBSD COMPAT_MACH system call name/number "master" file.
; This is used for the negative mach syscalls.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_ntp.h"
#endif

#include <sys/cdefs.h>

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/sysent.h>
#include <sys/sysproto.h>

#include <vm/vm.h>

#include <compat/mach/mach_types.h>
#include <compat/mach/mach_message.h>
#include <compat/mach/mach_clock.h>
#include <compat/mach/mach_port.h>
#include <compat/mach/mach_proto.h>
;;

0  AUE_NULL	UNIMPL	nosys
1  AUE_NULL	UNIMPL	nosys
2  AUE_NULL	UNIMPL	nosys
3  AUE_NULL	UNIMPL	nosys
4  AUE_NULL	UNIMPL	nosys
5  AUE_NULL	UNIMPL	nosys
6  AUE_NULL	UNIMPL	nosys
7  AUE_NULL	UNIMPL	nosys
8  AUE_NULL	UNIMPL	nosys
9  AUE_NULL	UNIMPL	nosys
10  AUE_NULL	STD		{ int _kernelrpc_mach_vm_allocate_trap( mach_port_name_t target, \
								mach_vm_offset_t *address, \
								mach_vm_size_t size, \
								int flags); }
11  AUE_NULL	UNIMPL	nosys
12  AUE_NULL	STD		{ int _kernelrpc_mach_vm_deallocate_trap(mach_port_name_t target, \
							mach_vm_offset_t address, mach_vm_size_t size); }
13  AUE_NULL	UNIMPL	nosys
14  AUE_NULL	STD		{ int _kernelrpc_mach_vm_protect_trap(mach_port_name_t target, \
								mach_vm_offset_t address, mach_vm_size_t size, \
								int set_maximum, vm_prot_t new_protection); }
15  AUE_MMAP	STD		{ int _kernelrpc_mach_vm_map_trap(mach_port_name_t target, \
						  		mach_vm_offset_t *address, mach_vm_size_t size, \
								mach_vm_offset_t mask, int flags, \
								vm_prot_t cur_protection); }
16  AUE_NULL	STD		{ int _kernelrpc_mach_port_allocate_trap( \
						  		mach_port_name_t target, mach_port_right_t right, \
						  		mach_port_name_t *name); }
17  AUE_NULL	STD		{ int _kernelrpc_mach_port_destroy_trap( \
						  		mach_port_name_t target, mach_port_name_t name);}
18  AUE_NULL	STD		{ int _kernelrpc_mach_port_deallocate_trap( \
						  		mach_port_name_t target, mach_port_name_t name);}
19  AUE_NULL	STD		{ int _kernelrpc_mach_port_mod_refs_trap(		  \
								mach_port_name_t target, mach_port_name_t name, \
						  		mach_port_right_t right, mach_port_delta_t delta); }
20  AUE_NULL	STD		{ int _kernelrpc_mach_port_move_member_trap( \
						  		mach_port_name_t target, mach_port_name_t member, \
								mach_port_name_t after);}
21  AUE_NULL	STD		{ int _kernelrpc_mach_port_insert_right_trap( \
						  		mach_port_name_t target, mach_port_name_t name, \
						  		mach_port_name_t poly, \
								mach_msg_type_name_t polyPoly); }
22  AUE_NULL	STD		{ int _kernelrpc_mach_port_insert_member_trap( \
						  		mach_port_name_t target, mach_port_name_t name, \
								mach_port_name_t pset); }
23  AUE_NULL	STD		{ int _kernelrpc_mach_port_extract_member_trap( \
						  		mach_port_name_t target, mach_port_name_t name, \
								mach_port_name_t pset); }
24  AUE_NULL	STD		{ int _kernelrpc_mach_port_construct_trap( \
						  		mach_port_name_t target, \
								mach_port_options_t options, uint64_t context, \
								mach_port_name_t *name);}
25  AUE_NULL	STD		{ int _kernelrpc_mach_port_destruct_trap( \
						  		mach_port_name_t target, mach_port_name_t name, \
								mach_port_delta_t srdelta, uint64_t guard);}
26	AUE_NULL	STD		{ int mach_reply_port(void); }
27	AUE_NULL	STD		{ int mach_thread_self_trap(void); }
28	AUE_NULL	STD		{ int mach_task_self_trap(void); }
29	AUE_NULL	STD	  	{ int mach_host_self_trap(void); }
30  AUE_NULL	UNIMPL	nosys
31	AUE_NULL	STD		{ int mach_msg_trap(mach_msg_header_t	*msg, \
			    		  	  mach_msg_option_t	option, \
			    			  mach_msg_size_t	send_size, \
			    			  mach_msg_size_t	rcv_size, \
			    			  mach_port_name_t	rcv_name, \
			    			  mach_msg_timeout_t	timeout, \
			    			  mach_port_name_t	notify); }
32	AUE_NULL	STD		{ int mach_msg_overwrite_trap( \
			    			 mach_msg_header_t	*msg, \
			   				 mach_msg_option_t	option, \
			  				 mach_msg_size_t	send_size, \
			    			 mach_msg_size_t	rcv_size, \
			    			 mach_port_name_t	rcv_name, \
			    			 mach_msg_timeout_t	timeout, \
			    			 mach_port_name_t	notify, \
			    			 mach_msg_header_t	*rcv_msg, \
			    			 mach_msg_size_t	scatter_list_size); }
33	AUE_NULL	STD		{ int mach_semaphore_signal_trap( \
			  mach_port_name_t signal_name); }
34	AUE_NULL	STD		{ int mach_semaphore_signal_all_trap( \
			      mach_port_name_t signal_name); }
35	AUE_NULL	STD		{ int mach_semaphore_signal_thread_trap( \
			      	mach_port_name_t signal_name, \
			    	mach_port_name_t thread); }
36	AUE_NULL	STD		{ int mach_semaphore_wait_trap( \
			      mach_port_name_t wait_name); }
37	AUE_NULL	STD		{ int mach_semaphore_wait_signal_trap( \
			      		  	  mach_port_name_t wait_name, \
			      			  mach_port_name_t signal_name); }
38	AUE_NULL	STD		{ int mach_semaphore_timedwait_trap( \
							    mach_port_name_t wait_name, \
			    				unsigned int sec, \
			    				mach_clock_res_t nsec); }
39	AUE_NULL	STD		{ int mach_semaphore_timedwait_signal_trap( \
						  	  	mach_port_name_t wait_name, \
							    mach_port_name_t signal_name, \
			    				unsigned int sec, mach_clock_res_t nsec); }
40  AUE_NULL	UNIMPL	nosys
41	AUE_NULL	STD		{ int _kernelrpc_mach_port_guard_trap(mach_port_name_t target, \
						  	  mach_port_name_t name, uint64_t guard, int strict); }
42  AUE_NULL	STD		{ int _kernelrpc_mach_port_unguard_trap(mach_port_name_t target, \
						  	  mach_port_name_t name, uint64_t guard); }
43	AUE_NULL	OBSOL	{ int mach_map_fd(int fd, \
			    mach_vm_offset_t offset, mach_vm_offset_t *va, \
			    mach_boolean_t findspace, mach_vm_size_t size); }
44  AUE_NULL	STD     { int mach_task_name_for_pid(mach_port_name_t target_tport, \
						  int pid, mach_port_name_t *tn); }
45	AUE_NULL	STD		{ int mach_task_for_pid(mach_port_name_t target_tport, \
						  int pid, mach_port_name_t *t); }
46	AUE_NULL	STD		{ int mach_pid_for_task(mach_port_name_t t, int *pid); }
47  AUE_NULL	UNIMPL	nosys
48	AUE_NULL	STD		{ int mach_macx_swapon( \
			    char *name, int flags, int size, int priority); }
49	AUE_NULL	STD		{ int mach_macx_swapoff( \
			    char *name, int flags); }
50  AUE_NULL	UNIMPL	nosys
51	AUE_NULL	STD		{ int mach_macx_triggers(int hi_water, int low_water, \
			  	  int flags, mach_port_name_t alert_port); }
52  AUE_NULL	STD		{ int mach_macx_backing_store_suspend(int suspend); }
53  AUE_NULL	STD		{ int mach_macx_backing_store_recovery(int pid); }
54  AUE_NULL	UNIMPL	nosys
55  AUE_NULL	UNIMPL	nosys
56  AUE_NULL	UNIMPL	nosys
57  AUE_NULL	UNIMPL	nosys
58  AUE_NULL	UNIMPL	nosys
59	AUE_NULL	STD		{ int mach_swtch_pri(int pri); }
60	AUE_NULL	STD		{ int mach_swtch(void); }
61	AUE_NULL	STD		{ int mach_thread_switch( \
			    mach_port_name_t thread_name, \
			    int option, \
			    mach_msg_timeout_t option_time); }
62	AUE_NULL	STD		{ int mach_clock_sleep_trap( \
			    mach_port_name_t clock_name, \
			    mach_sleep_type_t sleep_type, \
			    int sleep_sec, int sleep_nsec, \
			    mach_timespec_t *wakeup_time); }
63  AUE_NULL	UNIMPL	nosys
64  AUE_NULL	UNIMPL	nosys
65  AUE_NULL	UNIMPL	nosys
66  AUE_NULL	UNIMPL	nosys
67  AUE_NULL	UNIMPL	nosys
68  AUE_NULL	UNIMPL	nosys
69  AUE_NULL	UNIMPL	nosys
70  AUE_NULL	UNIMPL	nosys
71  AUE_NULL	UNIMPL	nosys
72  AUE_NULL	UNIMPL	nosys
73  AUE_NULL	UNIMPL	nosys
74  AUE_NULL	UNIMPL	nosys
75  AUE_NULL	UNIMPL	nosys
76  AUE_NULL	UNIMPL	nosys
77  AUE_NULL	UNIMPL	nosys
78  AUE_NULL	UNIMPL	nosys
79  AUE_NULL	UNIMPL	nosys
80  AUE_NULL	UNIMPL	nosys
81  AUE_NULL	UNIMPL	nosys
82  AUE_NULL	UNIMPL	nosys
83  AUE_NULL	UNIMPL	nosys
84  AUE_NULL	UNIMPL	nosys
85  AUE_NULL	UNIMPL	nosys
86  AUE_NULL	UNIMPL	nosys
87  AUE_NULL	UNIMPL	nosys
88  AUE_NULL	UNIMPL	nosys
89	AUE_NULL	STD		{ int mach_timebase_info(mach_timebase_info_t info); }
90	AUE_NULL	STD		{ int mach_wait_until(uint64_t deadline); }
91	AUE_NULL	STD		{ int mk_timer_create(void); }
92	AUE_NULL	STD		{ int mk_timer_destroy(mach_port_name_t name); }
93	AUE_NULL	STD		{ int mk_timer_arm(mach_port_name_t name, \
			      			mach_absolute_time_t expire_time); }
94	AUE_NULL	STD		{ int mk_timer_cancel(mach_port_name_t name, \
			    		mach_absolute_time_t *result_time); }
95	AUE_NULL	UNIMPL	nosys
96  AUE_NULL	UNIMPL	nosys
97  AUE_NULL	UNIMPL	nosys
98  AUE_NULL	UNIMPL	nosys
99  AUE_NULL	UNIMPL	nosys
100  AUE_NULL	UNIMPL	nosys
101  AUE_NULL	UNIMPL	nosys
102  AUE_NULL	UNIMPL	nosys
103  AUE_NULL	UNIMPL	nosys
104  AUE_NULL	UNIMPL	nosys
105  AUE_NULL	UNIMPL	nosys
106  AUE_NULL	UNIMPL	nosys
107  AUE_NULL	UNIMPL	nosys
108  AUE_NULL	UNIMPL	nosys
109  AUE_NULL	UNIMPL	nosys
110  AUE_NULL	UNIMPL	nosys
111  AUE_NULL	UNIMPL	nosys
112  AUE_NULL	UNIMPL	nosys
113  AUE_NULL	UNIMPL	nosys
114  AUE_NULL	UNIMPL	nosys
115  AUE_NULL	UNIMPL	nosys
116  AUE_NULL	UNIMPL	nosys
117  AUE_NULL	UNIMPL	nosys
118  AUE_NULL	UNIMPL	nosys
119  AUE_NULL	UNIMPL	nosys
120  AUE_NULL	UNIMPL	nosys
121  AUE_NULL	UNIMPL	nosys
122  AUE_NULL	UNIMPL	nosys
123  AUE_NULL	UNIMPL	nosys
124  AUE_NULL	UNIMPL	nosys
125  AUE_NULL	UNIMPL	nosys
126  AUE_NULL	UNIMPL	nosys
127  AUE_NULL	UNIMPL	nosys
