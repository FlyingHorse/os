This is the mach_support branch. It adds support for a subset of the mach
API as a precursor to supporting launchd.

Rudimentary Mach IPC is supported through libmach provided one's kernel
is compiled with COMPAT_MACH. The mach interface generator should be able
to work with modern .defs files.


Work to be done for v0:

- Makefile housekeeping - build all the auxiliary libraries
(osxsupport, mach, dispatch, cfxlite) as part of buildworld and
install them with installworld

- complete launchctl
    - add in the missing XML files to libcfxlite - look at the other
files for examples of
       pragmas to disable warnings about cast alignment and unused arguments to
       avoid needing to re-write those files

     - implement the two Foundation calls that launchctl uses

- make launchd useful
   - add in a runcom() to launchd to make it start up /etc/rc - see where the
     kernel panics, track down the inevitable brain-dead locking and
	 assertion issues

   - track down the shims for xinetd / crond

- verify that in-tree libdispatch works
   - get the tests associated with libdispatch compiling to figure out if anything
     is broken  - the latest versions can be found at:
         http://libdispatch.macosforge.org/trac/browser/trunk/testing

    - figure out why that function for block private data isn't being generated
	

Missing features ordered by version of launchd by which they'll be supported:

v0:
kevent flags:
- EVFILT_MACHPORT (mostly implemented but message queue check needs adding)

XML plist configuration

v1:
Support:
- MACH_SEND_NOTIFY

kevent flags needed by (at least) libdispatch:
- EVFILT_VM
	- NOTE_VM_PRESSURE
	- NOTE_VM_ERROR

per-user & per-session launchds (xpc domain system in domain.defs)
 - The audit session system calls: audit_session_self, audit_session_join,
   and audit_session_port

libUCL (YAML & JSON) configuration

extended posix_spawnattr calls in support/posix_spawn.c are not expected
to actually work yet, among others:
- posix_spawnattr_setbinpref_np
- posix_spawnattr_getbinpref_np

proc_setpcontrol
proc_get_dirty
proc_set_dirty
proc_track_dirty


v2 or later:

- AF_SYSTEM domain sockets and the event protocols

- XPC_JETSAM_BANDs (handle memory pressure)

I/O priority setting functionality - system call:
__iopolicysys supports:
	- getiopolicy_np
	- setiopolicy_np


- except NOTE_EXIT_MEMORY of questionable relevance
#define	NOTE_EXITSTATUS		0x04000000	/* exit status to be returned, valid for child process only */
#define	NOTE_EXIT_DETAIL	0x02000000	/* provide details on reasons for exit */
/*
 * If NOTE_EXIT_DETAIL is present, these bits indicate specific reasons for exiting.
 */
#define NOTE_EXIT_DETAIL_MASK		0x00070000
#define	NOTE_EXIT_DECRYPTFAIL		0x00010000 
#define	NOTE_EXIT_MEMORY		0x00020000
#define NOTE_EXIT_CSERROR		0x00040000





This is the top level of the FreeBSD source directory.  This file
was last revised on:
$FreeBSD$

For copyright information, please see the file COPYRIGHT in this
directory (additional copyright information also exists for some
sources in this tree - please see the specific source directories for
more information).

The Makefile in this directory supports a number of targets for
building components (or all) of the FreeBSD source tree, the most
commonly used one being ``world'', which rebuilds and installs
everything in the FreeBSD system from the source tree except the
kernel, the kernel-modules and the contents of /etc.  The ``world''
target should only be used in cases where the source tree has not
changed from the currently running version.  See:
http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/makeworld.html
for more information, including setting make(1) variables.

The ``buildkernel'' and ``installkernel'' targets build and install
the kernel and the modules (see below).  Please see the top of
the Makefile in this directory for more information on the
standard build targets and compile-time flags.

Building a kernel is a somewhat more involved process, documentation
for which can be found at:
   http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/kernelconfig.html
And in the config(8) man page.
Note: If you want to build and install the kernel with the
``buildkernel'' and ``installkernel'' targets, you might need to build
world before.  More information is available in the handbook.

The sample kernel configuration files reside in the sys/<arch>/conf
sub-directory (assuming that you've installed the kernel sources), the
file named GENERIC being the one used to build your initial installation
kernel.  The file NOTES contains entries and documentation for all possible
devices, not just those commonly used.  It is the successor of the ancient
LINT file, but in contrast to LINT, it is not buildable as a kernel but a
pure reference and documentation file.


Source Roadmap:
---------------
bin		System/user commands.

cddl		Various commands and libraries under the Common Development
		and Distribution License.

contrib		Packages contributed by 3rd parties.

crypto		Cryptography stuff (see crypto/README).

etc		Template files for /etc.

games		Amusements.

gnu		Various commands and libraries under the GNU Public License.
		Please see gnu/COPYING* for more information.

include		System include files.

kerberos5	Kerberos5 (Heimdal) package.

lib		System libraries.

libexec		System daemons.

release		Release building Makefile & associated tools.

rescue		Build system for statically linked /rescue utilities.

sbin		System commands.

secure		Cryptographic libraries and commands.

share		Shared resources.

sys		Kernel sources.

tools		Utilities for regression testing and miscellaneous tasks.

usr.bin		User commands.

usr.sbin	System administration commands.


For information on synchronizing your source tree with one or more of
the FreeBSD Project's development branches, please see:

  http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/synching.html
